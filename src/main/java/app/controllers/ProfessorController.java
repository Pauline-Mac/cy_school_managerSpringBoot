package app.controllers;

import app.models.*;
import app.repositories.*;
import app.services.mailing.GMailer;
import jakarta.servlet.http.HttpServletRequest;
import org.hibernate.Hibernate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.*;

// This means that this class is a Controller
@Controller
// This means URL's start with / (after Application path)
@RequestMapping(path="/professor")
public class ProfessorController {
  // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  @Autowired
  private UserRepository userRepository;
  @Autowired
  private ProfessorRepository professorRepository;
  @Autowired
  private StudentRepository studentRepository;
  @Autowired
  private CourseRepository courseRepository;
  @Autowired
  private NoteRepository noteRepository;
  @Autowired
  private EnrollmentRepository enrollmentRepository;
  @Autowired
  private StudentGroupRepository studentGroupRepository;

  @GetMapping(path="/index")
  public String Index(Model model, HttpServletRequest request) {
    request.getSession().getAttribute("user");
    return "/professor/index";
  }

  @GetMapping(path="/profile")
  public String Profile(Model model, HttpServletRequest request) {
    request.getSession().getAttribute("user");
    return "/professor/profile";
  }

  @GetMapping(path="/schedule")
  public String Schedule(Model model, HttpServletRequest request) {
    User user = (User) request.getSession().getAttribute("user");
    Professor professor = professorRepository.getProfessorByUserId(user.getUserId());
    List<Course> classes = (List<Course>) courseRepository.getCoursesByProfessor(professor);
    List<Map<String, Object>> classesData = new ArrayList<>();
    for (Course course : classes) {
      Map<String, Object> classData = new HashMap<>();
      classData.put("className", course.getClassName());
      classData.put("countStudent", courseRepository.getCountStudentByClass(course.getClassId()));
      classesData.add(classData);
    }
    model.addAttribute("classes", classesData);
    return "/professor/schedule";
  }

  @GetMapping(path="/notes")
  public String Notes(Model model, HttpServletRequest request) {
    User user = (User) request.getSession().getAttribute("user");
    List<Course> courses = (List<Course>) courseRepository.getCoursesByProfessor((Professor) user);
    List<Note> notes = new ArrayList<>();
    for (Course c : courses) {
      Enrollment enrollment = enrollmentRepository.getEnrollmentByCourse(c);
      List<Note> n = noteRepository.getNotesByEnrollment(enrollment);
      notes.addAll(n);
    }
    model.addAttribute("notes", notes);
    return "/professor/notes";
  }

  @GetMapping(path="/addNote")
  public String GetAddNote(Model model, HttpServletRequest request) {
    User user = (User) request.getSession().getAttribute("user");
    List<Course> courses = (List<Course>) courseRepository.getCoursesByProfessor((Professor) user);
    request.setAttribute("courses", courses);

    String nom = request.getParameter("nom");
    String prenom = request.getParameter("prenom");
    String studentgroupname = request.getParameter("studentgroupname");
    String chosenCourse = request.getParameter("choosen_course");

    if (chosenCourse == null || chosenCourse.isEmpty()) {
      request.setAttribute("error", "Veuillez sélectionner une matière.");
    } else {
      StudentGroup studentGroup = studentGroupRepository.getStudentGroupByStudentGroupName(studentgroupname);
      List<Student> resultats = studentRepository.getStudentsByLastNameAndFirstNameAndStudentGroup(nom, prenom, studentGroup);
      request.setAttribute("resultats", resultats);
    }
      return "professor/addNote";
  }

  @PostMapping(path="/addNote")
  public String PostAddNote(Model model, HttpServletRequest request) {
    String action = request.getParameter("action");

    if ("search".equals(action)) {
      User user = (User) request.getSession().getAttribute("user");
      List<Course> courses = (List<Course>) courseRepository.getCoursesByProfessor((Professor) user);
      request.setAttribute("courses", courses);

      String nom = request.getParameter("nom");
      String prenom = request.getParameter("prenom");
      String studentgroupname = request.getParameter("studentgroupname");
      String chosenCourse = request.getParameter("choosen_course");

      if (chosenCourse == null || chosenCourse.isEmpty()) {
        request.setAttribute("error", "Veuillez sélectionner une matière.");
      } else {
        StudentGroup studentGroup = studentGroupRepository.getStudentGroupByStudentGroupName(studentgroupname);
        List<Student> resultats = studentRepository.getStudentsByLastNameAndFirstNameAndStudentGroup(nom, prenom, studentGroup);
        request.setAttribute("resultats", resultats);
      }
    } else if ("addNote".equals(action)) {
      Student selected_student = studentRepository.getStudentByEmail(request.getParameter("selected_student"));
      String noteValueStr = request.getParameter("note_value");
      Enrollment selected_student_enrollment = enrollmentRepository.getEnrollmentsByStudent(selected_student).getFirst();

      try {
        double noteValue = Double.parseDouble(noteValueStr);
        noteRepository.save(new Note(noteValue, selected_student_enrollment));
        GMailer mailer = new GMailer();
        mailer.sendNewNoteNotification(selected_student);
        request.setAttribute("success", "La note a été attribuée avec succès.");
      } catch (NumberFormatException e) {
        request.setAttribute("error", "Veuillez entrer une note valide.");
      } catch (Exception e) {
        request.setAttribute("error", "Erreur lors de l'attribution de la note : " + e.getMessage());
      }
    }
    return "/professor/addNote";
  }
}