package app.controllers;

import app.models.*;
import app.repositories.*;
import app.services.mailing.GMailer;
import app.services.pdfgenerator.PdfGenerator;
import jakarta.enterprise.inject.Produces;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// This means that this class is a Controller
@Controller
// This means URL's start with / (after Application path)
@RequestMapping(path="/student")
public class StudentController {
  // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  @Autowired
  private UserRepository userRepository;
  @Autowired
  private ProfessorRepository professorRepository;
  @Autowired
  private StudentRepository studentRepository;
  @Autowired
  private CourseRepository courseRepository;
  @Autowired
  private NoteRepository noteRepository;
  @Autowired
  private EnrollmentRepository enrollmentRepository;
  @Autowired
  private StudentGroupRepository studentGroupRepository;

  @GetMapping(path="/index")
  public String Index(Model model, HttpServletRequest request) {
    request.getSession().getAttribute("user");
    return "/student/index";
  }

  @GetMapping(path="/profile")
  public String Profile(Model model, HttpServletRequest request) {
    request.getSession().getAttribute("user");
    return "/student/profile";
  }

  @GetMapping(path="/schedule")
  public String Schedule(Model model, HttpServletRequest request) {
    User user = (User) request.getSession().getAttribute("user");
    Student student = studentRepository.getStudentByUserId(user.getUserId());
    List<Enrollment> enrollments = (List<Enrollment>) enrollmentRepository.getEnrollmentsByStudent(student);
    List<Course> courses = new ArrayList<>();
    for (Enrollment enrollment : enrollments) {
      Map<String, Object> classData = new HashMap<>();
      courses.add(enrollment.getCourse());
    }
    model.addAttribute("classes", courses);
    return "/student/schedule";
  }

  @GetMapping(path="/notes")
  public String Notes(Model model, HttpServletRequest request) {
    try {
      User user = (User) request.getSession().getAttribute("user");
      Student student = studentRepository.getStudentByUserId(user.getUserId());
      List<Enrollment> enrollments = enrollmentRepository.getEnrollmentsByStudent((Student) student);
      Map<String, Object> data = new HashMap<>();

      if (!enrollments.isEmpty()) {
        List<Map<String, Object>> matieres = new ArrayList<>();

        for (Enrollment enrollment : enrollments) {

          if (!enrollment.getNotes().isEmpty()) {
            int i = 0;
            for (Note note : enrollment.getNotes()) {
              Map<String, Object> noteData = new HashMap<>();
              noteData.put("note", String.format("%.2f", note.getValue()));
              noteData.put("nom", enrollment.getCourse().getClassName());
              noteData.put("date", note.getCreatedAt());
              noteData.put("libelle", "Partiel session " + (i + 1));

              matieres.add(noteData);
              i++;
            }
          } else {
            Map<String, Object> matiereData = new HashMap<>();
            matiereData.put("nom", enrollment.getCourse().getClassName());
            matiereData.put("note", "Aucune note");
            matiereData.put("date", "N/A");
            matiereData.put("libelle", "N/A");
            matieres.add(matiereData);
          }
        }
        data.put("matieres", matieres);
      }
      request.setAttribute("matieres", data.get("matieres"));
    } catch (Exception e) {
      request.setAttribute("error", "Unable to retrieve student information: " + e.getMessage());
    }
    return "/student/notes";
  }

  @GetMapping(value = "/notes/export", produces = {"application/pdf"})
  public String NotesExport(Model model, HttpServletRequest request, HttpServletResponse response) {
    User user = (User) request.getSession().getAttribute("user");
    Student student = studentRepository.getStudentByUserId(user.getUserId());
    List<Enrollment> enrollments = enrollmentRepository.getEnrollmentsByStudent(student);
    String pdfPath = PdfGenerator.generateReportForStudent(student, enrollments);
    try (FileInputStream fis = new FileInputStream(pdfPath); OutputStream os = response.getOutputStream()) {
      response.setContentType("application/pdf");
      response.setHeader("Content-Disposition", "attachment; filename=\"" + new File(pdfPath).getName() + "\"");

      byte[] buffer = new byte[1024];
      int bytesRead;
      while ((bytesRead = fis.read(buffer)) != -1) {
        os.write(buffer, 0, bytesRead);
      }
    } catch (Exception e) {
      System.err.println(e.getMessage());
    }
    return "/student/notes/export";
  }
}