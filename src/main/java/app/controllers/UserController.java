package app.controllers;

import app.models.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import app.repositories.UserRepository;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Locale;
import java.util.Optional;

// This means that this class is a Controller
@Controller
// This means URL's start with / (after Application path)
@RequestMapping(path="/")
public class UserController {
  // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  @Autowired
  private UserRepository userRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (
          @RequestParam String email,
          @RequestParam String password,
          @RequestParam String last_name,
          @RequestParam String first_name,
          @RequestParam String phone,
          @RequestParam String birth_date
  ) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    User user = new User();
    user.setEmail(email);
    user.setPassword(password);
    user.setLastName(last_name);
    user.setFirstName(first_name);
    user.setPhone(phone);
    user.setEmail(email);
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    formatter = formatter.withLocale(Locale.FRENCH);
    LocalDate date = LocalDate.parse(birth_date, formatter);
    user.setBirthDate(date);
    userRepository.save(user);
    return "Saved";
  }

  public String redirectToLogin(){
    return "redirect:/login";
  }

  @GetMapping(path="/admin/index")
  public String AdminIndex(Model model, RedirectAttributes redirectAttributes) {
    String email = (String) model.asMap().get("email");
    model.addAttribute("user", userRepository.findByEmail(email));
    return "/admin/index";
  }

  @GetMapping(path="/admin/profile")
  public String AdminProfile(Model model, RedirectAttributes redirectAttributes) {
    return "/admin/profile";
  }

  @GetMapping(path="/admin/students")
  public String AdminStudents(Model model) {
    return "/admin/students";
  }

  @GetMapping(path="/admin/professors")
  public String AdminProfessors(Model model) {
    List<User> users = userRepository.findAll();
    model.addAttribute("users", users);
    return "/admin/professors";
  }
}